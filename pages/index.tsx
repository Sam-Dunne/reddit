import type { NextPage, GetServerSideProps } from 'next';
import Link from 'next/link';
import { ArrowNarrowLeftIcon, ArrowNarrowRightIcon } from '@heroicons/react/solid';
import { useState, useEffect } from 'react';
import Head from 'next/head';
import Navbar from '../components/navbar/navbar';
import Footer from '../components/footer/footer';
import List from '../components/list/list';
import styles from '../styles/Home.module.css';
import 'isomorphic-fetch';
import {
    ALL_POSTS,
    BASE_URL,
    isEmpty,
    serializeQuery,
    SUBREDDIT_PATH,
    SUFFIX,
} from '../utils';

interface IProps {
    postRes: models.IRedditResponse;
    subreddit: string;
    query: models.IRedditQueryParams;
}

const DEFAULT_POST_LIMIT = 10;

export const getServerSideProps: GetServerSideProps = async (context) => {
    const query = context.query;
    let subreddit = query.s;
    if (isEmpty(subreddit)) {
        subreddit = ALL_POSTS;
    }

    if (isEmpty(query.limit)) {
        query.limit = DEFAULT_POST_LIMIT.toString();
    }

    if (isEmpty(query.count)) {
        query.count = '0';
    }

    delete query.s;

    try {


        const response = await fetch(
            `${BASE_URL}${SUBREDDIT_PATH}${subreddit}${SUFFIX}${serializeQuery(
                query
            )}`
        );

        const jres: models.IRedditResponse = await response.json();

        return {
            props: {
                postRes: jres,
                subreddit,
                query
            },
        };
    } catch (error) {
        return {
            props: {
                postRes: null,
                subreddit,
                query
            },
        };
    }
};


const Home: NextPage<IProps> = ({ postRes, subreddit, query }: IProps) => {
    // const [posts, setPosts] = useState([] as models.IRedditPost[]);
    // const getPosts = async () => {
    //   try {
    //     const res = await fetch('/api/reddit');
    //     const redditResponse: models.IRedditResponse = await res.json();
    //     setPosts(redditResponse.data.children);

    //   } catch (error) {
    //     console.log(error)
    //   }
    // };

    // useEffect(() => {
    //   getPosts();
    // }, [])

    const limit = Number(query.limit);
    const pdata = postRes?.data;
    let after = pdata?.after;
    let count = Number(query.count);

    if (pdata?.dist > limit || pdata?.children?.length > limit) {
        pdata.children = pdata?.children?.slice(0, limit);
        const lastChild = pdata.children[limit - 1];
        after = `${lastChild?.kind}_${lastChild?.data?.id}`
    }

    const hasAfter = !isEmpty(after);
    const hasBefore = !isEmpty(pdata?.before);
    const hasSubR = !isEmpty(subreddit) && subreddit !== ALL_POSTS ? `/r/${subreddit}` : '';

    if (!isEmpty(query.before)) {
        count -= limit;
    }

    if (isEmpty(count) || count < 0) {
        count = 0;
    }

    const bQuery: models.IGetRedditPosts = { count };
    const aQuery: models.IGetRedditPosts = { count: count + limit };

    if (hasSubR) {
        bQuery.search = aQuery.search = subreddit;
    }

    if (hasBefore) {
        bQuery.before = pdata.before;
    }

    if (hasAfter) {
        aQuery.after = after;
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>subReddit</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png"></link>
                <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png"></link>
                <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png"></link>
                <link rel="manifest" href="/favicon/site.webmanifest"></link>
            </Head>
            <Navbar />
            <div className="relative bg-gray-200 pt-8 lg:pt-24 pb-16 min-h-screen">
                <main>
                    <div className='absolute top-12 text-xs w-full text-center font-bold'>
                        <span>{hasSubR ? `/r/${subreddit}` : ''}</span>
                    </div>
                    <div className='max-w-2xl mx-auto pb-5 px-4 mb-4'>
                        <div className="flex justify-between text-sm text-gray-500 font-medium">
                            <Link href={`/${serializeQuery(bQuery)}`}>
                                <a className={`flex items-center justify-center ${isEmpty(bQuery.before) ? 'invisible' : ''}`}>
                                    <ArrowNarrowLeftIcon className='h-5 mr-1 py-3' />
                                    <span>Previous</span>
                                </a>
                            </Link>
                            <Link href={`/${serializeQuery(aQuery)}`}>
                                <a className={`flex items-center justify-center ${isEmpty(aQuery.after) ? 'invisible' : ''}`}>
                                    <span>Next</span>
                                    <ArrowNarrowRightIcon className='h-5 ml-1 py-3' />
                                </a>
                            </Link>
                        </div>
                        <List posts={postRes?.data?.children} />
                        <div className="flex justify-between text-sm text-gray-500 font-medium">
                            <Link href={`/${serializeQuery(bQuery)}`}>
                                <a className={`flex items-center justify-center ${isEmpty(bQuery.before) ? 'invisible' : ''}`}>
                                    <ArrowNarrowLeftIcon className='h-5 mr-1 py-3' />
                                    <span>Previous</span>
                                </a>
                            </Link>
                            <Link href={`/${serializeQuery(aQuery)}`}>
                                <a className={`flex items-center justify-center ${isEmpty(aQuery.after) ? 'invisible' : ''}`}>
                                    <span>Next</span>
                                    <ArrowNarrowRightIcon className='h-5 ml-1 py-3' />
                                </a>
                            </Link>
                        </div>
                    </div>
                </main>
                <Footer />
            </div>
        </div>
    );
};

export default Home;
